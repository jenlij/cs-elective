# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?
# Answer: 6857

def main(num):
    factors = []
    prime_factors = []
    for n in range(2, num):
        if num % n == 0:
            factors.append(n)
    for fac in factors:   
        prime = True      
        for x in range(2,fac):
            if fac % x == 0:
                prime = False
        if prime == True:
            prime_factors.append(fac)


        # print "a", fac
        # for x in range(2, fac):
        #     print "b", x
        #     if fac % x == 0:
        #         print "break"
        #         break
        #     else: 
        #         print "d"
        #         if x not in prime_factors:
        #             prime_factors.append(x) 
    print prime_factors            


# main(13195)    

def main2(num): 
    factors = []
    prime_factors = []
    for n in range(2, num):
        if num % n == 0:
            prime = True      
            for x in range(2,n):
                if n % x == 0:
                    prime = False
            if prime == True:
                prime_factors.append(n)

    
    
    print prime_factors  


#  main2(13195)



# THIS WORKSSSSS!!!!!!!
def main3(num):
    aopf = [0,1]
    while not (aopf[-1] == aopf[-2]):
        for n in xrange(2, num):
            if num % n == 0:
                prime = True      
                for x in xrange(2,n):
                    if n % x == 0:
                        prime = False
                        break
                if prime == True:
                    num = num / n
                    aopf.append(n)
                    break
        aopf.append(num)
    print aopf[-1]            
                

            
main3(13195)
main3(600851475143)   
main3(398742423456) 



# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

# Find the sum of all the multiples of 3 or 5 below 1000. A: 233168
def mainA(max):
    total = 0
    for n in range(max):
        if (n % 5 == 0 or n % 3 == 0):
            total = total + n
    print total
mainA(1000)


# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
#A: 4613732

def mainB():
    fib_number_total = 0
    fib_number_even_total = 0
    fib_number_array = [1,2,3]
    while fib_number_array[-1] < 4000000:
        fib_number_array.append(fib_number_array[-1] + fib_number_array[-2])
        
    fib_number_even_total = sum(filter(lambda x: x % 2 == 0, fib_number_array))
    
    print fib_number_even_total
    return fib_number_even_total

mainB()